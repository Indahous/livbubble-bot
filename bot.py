# bot.py
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command

# üî¥ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π —Ç–æ–∫–µ–Ω –∏–∑ @BotFather
BOT_TOKEN = "7792432750:AAEPP3pGgrXev7yQmRa8nsRFx4UU1nG4ats"

# üìå –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
CHANNEL_USERNAME = "livbubble"
CHANNEL_URL = f"https://t.me/{CHANNEL_USERNAME}"

# URL —Ç–≤–æ–µ–≥–æ Web App (—á–µ—Ä–µ–∑ ngrok –∏–ª–∏ —Ö–æ—Å—Ç–∏–Ω–≥)
# –ü—Ä–∏–º–µ—Ä: https://abcd-123-45-67-89.ngrok.io
WEBAPP_URL = "https://livbubble-bot-webapp.onrender.com"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
def get_subscribe_button():
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        chat_member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=message.from_user.id)

        if chat_member.status in ("member", "administrator", "creator"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–≥—Ä—ã
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                        web_app=types.WebAppInfo(url=WEBAPP_URL)
                    )]
                ]
            )
            await message.answer(
                "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Liv Bubble</b>!\n\n"
                "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00!",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            await message.answer(
                "üîî –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
                reply_markup=get_subscribe_button()
            )
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_subscribe_button()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    try:
        chat_member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=callback.from_user.id)

        if chat_member.status in ("member", "administrator", "creator"):
            # –ü–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–≥—Ä—ã
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                        web_app=types.WebAppInfo(url=WEBAPP_URL)
                    )]
                ]
            )
            await callback.message.edit_text(
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Liv Bubble</b>!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await callback.answer(
                "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' —Å–Ω–æ–≤–∞.",
                show_alert=True
            )
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App (–∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    data = message.web_app_data.data
    await message.answer(
        "üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n"
        "–ü–µ—Ä–≤—ã–µ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∞—Ç Telegram Stars.\n"
        "–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–∑—ã (iPhone, PS5, –Ω–∞—É—à–Ω–∏–∫–∏) –±—É–¥—É—Ç —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
        parse_mode="HTML"
    )
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App
    data = update.web_app_data.data
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # –ù–∞–ø—Ä–∏–º–µ—Ä: import json; payload = json.loads(data)
        await update.message.answer(
            "üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n"
            "–ü–µ—Ä–≤—ã–µ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∞—Ç Telegram Stars.\n"
            "–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–∑—ã (iPhone, PS5, –Ω–∞—É—à–Ω–∏–∫–∏) –±—É–¥—É—Ç —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            parse_mode="HTML"
        )
    except Exception as e:
        await update.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        print(f"–û—à–∏–±–∫–∞: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    print("‚úÖ –ë–æ—Ç Liv Bubble –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())