# bot.py
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

# ================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ================

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ .env)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç BOT_TOKEN")

# URL Web App (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–µ–ø–ª–æ–µ–Ω)
WEBAPP_URL = "https://livbubble-webapp.onrender.com"

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–Ω–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º)
ADMIN_IDS = []
admin_ids_str = os.getenv("ADMIN_IDS", "")
if admin_ids_str:
    try:
        ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(",")]
    except ValueError:
        logging.getLogger(__name__).error("‚ùå –û—à–∏–±–∫–∞: ADMIN_IDS –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏")

# ================
# –°–ø–∏—Å–∫–∏ —Å–ø–∞–º–∞
# ================

SPAM_KEYWORDS = [
    "FREE ETH", "FREEETHER.NET", "CLAIM ETH", "GET FREE CRYPTO",
    "BITCOIN GIVEAWAY", "ETHEREUM AIRDROP", "FREE CRYPTO",
    "CONNECT YOUR WALLET", "WALLET VERIFY", "FREE MONEY",
    "CLICK HERE", "INSTANT REWARDS", "NO REGISTRATION",
    "ABSOLUTELY FREE", "DROP ETH", "GIVEAWAY", "FREE NFT",
    "AIRDROP", "SEND ETHER", "FREE MONEY", "CRYPTO BONUS",
    "MAKE MONEY FAST", "PUMP MY WALLET", "VERIFICATION REQUIRED",
    "WALLET SYNC", "DEPOSIT TO CLAIM", "ABSOLUTELY FREE"
]

SPAM_DOMAINS = [
    "freeether.net", "free-eth.com", "claim-eth.org", "airdrop-crypto.ru",
    "getfreecrypto.io", "crypto-giveaway.net", "bitcoin-airdrop.org",
    "wallet-verify.com", "eth-drop.com", "free-crypto.today",
    "claimcrypto.pro", "airdrop-funds.com", "verifywallet.net",
    "bit-airdrop.com", "nft-giveaway.net"
]

# ================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ================

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ================
# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# ================

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ================
# –ö–æ–º–∞–Ω–¥–∞ /start
# ================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])

    welcome_text = (
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Liv Bubble**!\n\n"
        "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00!"
    )

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

# ================
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
# ================

def is_spam(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–ø–∞–º –Ω–∞–π–¥–µ–Ω.
    """
    if not text:
        return False

    text_upper = text.upper()
    text_lower = text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π —Å–ø–æ—Å–æ–±)
    for domain in SPAM_DOMAINS:
        if domain in text_lower:
            return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    spam_signals = sum(1 for keyword in SPAM_KEYWORDS if keyword in text_upper)
    return spam_signals >= 2  # –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

# ================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∞–º–∞
# ================

@dp.message()
async def filter_spam(message: types.Message):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Å—ã–ª–∫–∏, –ø–æ–¥–ø–∏—Å–∏.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã.
    """
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    if message.from_user.id in ADMIN_IDS:
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–≤–∞–∂–Ω–æ!)
    if message.text and message.text.startswith('/'):
        return  # ‚Üê –ö–ª—é—á–µ–≤–æ–µ: –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.forward_date:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        logger.warning(f"–£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if message.text and is_spam(message.text):
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("‚ùå –°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        logger.warning(f"–°–ø–∞–º —É–¥–∞–ª—ë–Ω –æ—Ç {message.from_user.id}: {message.text}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if message.caption and is_spam(message.caption):
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("‚ùå –°–ø–∞–º –≤ –ø–æ–¥–ø–∏—Å–∏ —É–¥–∞–ª—ë–Ω.")
        logger.warning(f"–°–ø–∞–º –≤ –ø–æ–¥–ø–∏—Å–∏ —É–¥–∞–ª—ë–Ω –æ—Ç {message.from_user.id}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –≤ —Ç–µ–∫—Å—Ç–µ
    if message.entities:
        for entity in message.entities:
            if entity.type == "url":
                url = message.text[entity.offset:entity.offset + entity.length].lower()
                if any(domain in url for domain in SPAM_DOMAINS):
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    await message.answer("‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
                    logger.warning(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {url}")
                    return

# ================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
# ================

@dp.message()
async def handle_web_app_data(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Web App —á–µ—Ä–µ–∑ Telegram.WebApp.sendData()
    """
    if not message.web_app_data:
        return

    try:
        data = message.web_app_data.data

        if "game_completed" in data:
            bubbles = data.split('bubbles_popped":')[1].split('}')[0] if 'bubbles_popped' in data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await message.answer(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É!\n"
                f"–õ–æ–ø–Ω—É–ª –ø—É–∑—ã—Ä–µ–π: {bubbles}\n\n"
                "–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è. –ñ–¥–∏ –Ω–∞–≥—Ä–∞–¥—É!"
            )
        elif "task_completed" in data:
            task_id = data.split('task_id":')[1].split('}')[0] if 'task_id' in data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebAppData: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# ================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ================

async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    logger.info("üåê –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
