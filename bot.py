# bot.py ‚Äî –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å FastAPI, Web App, –ê–¥–º–∏–Ω–∫–æ–π

import asyncio
import logging
import os
import json
from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

# ================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ)
# ================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ================
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ================

try:
    from dotenv import load_dotenv
    load_dotenv()
    logger.info("‚úÖ .env –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é")

# ================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ================

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–∞–Ω–∞ –≤ Render")

WEBAPP_URL = os.getenv("WEBAPP_URL", "https://livbubble-webapp.onrender.com")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "@livbubble")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "admin123")  # üîê –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–Ω–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º)
ADMIN_IDS = []
admin_ids_str = os.getenv("ADMIN_IDS", "")
if admin_ids_str:
    try:
        ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(",")]
    except ValueError:
        logger.error("‚ùå –û—à–∏–±–∫–∞: ADMIN_IDS –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏")

# ================
# –°–ø–∏—Å–∫–∏ —Å–ø–∞–º–∞
# ================

SPAM_KEYWORDS = [
    "FREE ETH", "FREEETHER.NET", "CLAIM ETH", "GET FREE CRYPTO",
    "BITCOIN GIVEAWAY", "ETHEREUM AIRDROP", "FREE CRYPTO",
    "CONNECT YOUR WALLET", "WALLET VERIFY", "FREE MONEY",
    "CLICK HERE", "INSTANT REWARDS", "NO REGISTRATION",
    "ABSOLUTELY FREE", "DROP ETH", "GIVEAWAY", "FREE NFT",
    "AIRDROP", "SEND ETHER", "FREE MONEY", "CRYPTO BONUS",
    "MAKE MONEY FAST", "PUMP MY WALLET", "VERIFICATION REQUIRED",
    "WALLET SYNC", "DEPOSIT TO CLAIM", "ABSOLUTELY FREE"
]

SPAM_DOMAINS = [
    "freeether.net", "free-eth.com", "claim-eth.org", "airdrop-crypto.ru",
    "getfreecrypto.io", "crypto-giveaway.net", "bitcoin-airdrop.org",
    "wallet-verify.com", "eth-drop.com", "free-crypto.today",
    "claimcrypto.pro", "airdrop-funds.com", "verifywallet.net",
    "bit-airdrop.com", "nft-giveaway.net"
]

# ================
# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# ================

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ================
# FastAPI
# ================

app = FastAPI()

# ================
# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
# ================

# –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫—É (HTML, CSS, JS)
app.mount("/", StaticFiles(directory=".", html=True), name="static")

# ================
# Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# ================

def require_admin_auth(request: Request):
    token = request.cookies.get("authToken")
    if token != ADMIN_PASSWORD:
        raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    return True

# ================
# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
# ================

@app.get("/admin", response_class=HTMLResponse)
async def admin_panel():
    try:
        with open("admin/index.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content, status_code=200)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ admin/index.html: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

# ================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
# ================

@app.post("/check-password")
async def check_password(request: Request):
    try:
        data = await request.json()
        password = data.get("password")
        if password == ADMIN_PASSWORD:
            response = JSONResponse({"success": True, "message": "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π"})
            response.set_cookie(
                key="authToken",
                value=ADMIN_PASSWORD,
                httponly=True,
                secure=True,
                max_age=30 * 60,  # 30 –º–∏–Ω—É—Ç
                samesite="lax",
                path="/"  # ‚úÖ –ö—Ä–∏—Ç–∏—á–Ω–æ: –∫—É–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å–µ–≥–æ –¥–æ–º–µ–Ω–∞
            )
            return response
        else:
            response = JSONResponse({"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"}, status_code=401)
            response.delete_cookie("authToken", path="/")
            return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
        return JSONResponse({"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è"}, status_code=500)

# ================
# –í—ã—Ö–æ–¥
# ================

@app.post("/logout")
async def logout():
    response = JSONResponse({"success": True})
    response.delete_cookie("authToken", path="/")
    return response

# ================
# –ß—Ç–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
# ================

@app.get("/tasks.json")
async def get_tasks():
    try:
        with open("tasks.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        return data
    except FileNotFoundError:
        return {"priority_tasks": []}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tasks.json: {e}")
        return {"priority_tasks": []}

# ================
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
# ================

@app.post("/save-tasks", dependencies=[Depends(require_admin_auth)])
async def save_tasks(request: Request):
    try:
        data = await request.json()
        priority_tasks = data.get("priority_tasks", [])
        
        if not isinstance(priority_tasks, list):
            return JSONResponse({"success": False, "message": "priority_tasks –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º"}, status_code=400)

        with open("tasks.json", "w", encoding="utf-8") as f:
            json.dump({"priority_tasks": priority_tasks}, f, ensure_ascii=False, indent=2)

        logger.info("‚úÖ –ó–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tasks.json")
        return JSONResponse({"success": True, "message": "–ó–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è tasks.json: {e}")
        return JSONResponse({"success": False, "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"}, status_code=500)

# ================
# –ö–æ–º–∞–Ω–¥–∞ /start
# ================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        
        if member.status in ["member", "administrator", "creator"]:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )]
            ])
            await message.answer(
                "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Liv Bubble</b>!\n\n"
                "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚Äî –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                    url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
                )]
            ])
            await message.answer(
                "‚ö†Ô∏è –ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @livbubble.\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
# ================

@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –æ—Ç {message.from_user.id}: {message.web_app_data.data}")
    
    try:
        data = json.loads(message.web_app_data.data)

        if data.get("game_completed"):
            bubbles = data.get("bubbles_popped", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            await message.answer(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É!\n"
                f"–õ–æ–ø–Ω—É–ª –ø—É–∑—ã—Ä–µ–π: {bubbles}\n\n"
                "–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è. –ñ–¥–∏ –Ω–∞–≥—Ä–∞–¥—É!"
            )
        elif data.get("task_completed"):
            task_id = data.get("task_id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebAppData: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# ================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ================

async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    logger.info("üåê –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Web App
    try:
        import requests
        response = requests.get(WEBAPP_URL, timeout=5)
        if response.status_code == 200:
            logger.info(f"‚úÖ Web App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {WEBAPP_URL}")
        else:
            logger.warning(f"‚ö†Ô∏è Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Web App: {e}")
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
